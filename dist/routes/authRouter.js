"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authRouter = void 0;
const express_1 = require("express");
const authController_1 = require("../controllers/authController");
const blogsMiddleware_1 = require("../middleware/blogsMiddleware");
const loginValidationModel_1 = require("../validation/loginValidationModel");
const authValidationModel_1 = require("../validation/authValidationModel");
const authMiddlewareWithBearer_1 = require("../middleware/authMiddlewareWithBearer");
const verifyTokenMiddleware_1 = require("../middleware/verifyTokenMiddleware");
const rateLimitMiddleware_1 = require("../middleware/rateLimitMiddleware");
const compositionRoot_1 = require("../compositionRoot");
exports.authRouter = (0, express_1.Router)();
const authControllerInstance = compositionRoot_1.container.resolve(authController_1.AuthController);
exports.authRouter.get('/me', authMiddlewareWithBearer_1.authMiddlewareWithBearer, authControllerInstance.meController.bind(authControllerInstance));
exports.authRouter.post('/login', rateLimitMiddleware_1.accessCounterMiddleware, (0, loginValidationModel_1.loginValidationModelMiddleware)(), blogsMiddleware_1.errorMiddleware, authControllerInstance.authController.bind(authControllerInstance));
exports.authRouter.post('/logout', verifyTokenMiddleware_1.verifyTokenMiddleware, authControllerInstance.logoutController.bind(authControllerInstance));
exports.authRouter.post('/new-password', rateLimitMiddleware_1.accessCounterMiddleware, (0, authValidationModel_1.newPasswordMiddleware)(), blogsMiddleware_1.errorMiddleware, authControllerInstance.newPasswordController.bind(authControllerInstance));
exports.authRouter.post('/refresh-token', verifyTokenMiddleware_1.verifyTokenMiddleware, authControllerInstance.refreshTokenController.bind(authControllerInstance));
exports.authRouter.post('/password-recovery', rateLimitMiddleware_1.accessCounterMiddleware, (0, authValidationModel_1.authPasswordRecovery)(), blogsMiddleware_1.errorMiddleware, authControllerInstance.passwordRecoveryController.bind(authControllerInstance));
exports.authRouter.post('/registration', rateLimitMiddleware_1.accessCounterMiddleware, (0, authValidationModel_1.authRegistrationValidationMiddleware)(), blogsMiddleware_1.errorMiddleware, authControllerInstance.registrationController.bind(authControllerInstance));
exports.authRouter.post('/registration-confirmation', rateLimitMiddleware_1.accessCounterMiddleware, (0, authValidationModel_1.authRegistrationConfirmationValidationMiddleware)(), blogsMiddleware_1.errorMiddleware, authControllerInstance.registrationConfirmationController.bind(authControllerInstance));
exports.authRouter.post('/registration-email-resending', rateLimitMiddleware_1.accessCounterMiddleware, (0, authValidationModel_1.authEmailResendingValidationMiddleware)(), blogsMiddleware_1.errorMiddleware, authControllerInstance.emailResendingController.bind(authControllerInstance));
